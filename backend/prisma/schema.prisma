// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @db.VarChar(255)
  question      Question[]
  answer        Answer[]
  role          UserRole        @default(USER)
  name          String?
  oneWord       String?
  goal          String?
  github        String?
  x             String?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  deleted_at    DateTime?
  ViewingStatus ViewingStatus[]
  FavoriteVideo FavoriteVideo[]
}

enum UserRole {
  USER
  ADMIN
}

model Course {
  id          String      @id @default(uuid()) @db.VarChar(255)
  sections    Section[]
  name        String
  description String?
  image       String?
  published   Boolean     @default(false) // コースが公開されているかどうか。
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?
  tags        CourseTag[]
  requiredTime String?
}

model Section {
  id         String    @id @default(uuid()) @db.VarChar(255)
  course     Course    @relation(fields: [course_id], references: [id])
  course_id  String    @db.VarChar(255)
  videos     Video[]
  title      String?
  order      Int?
  published  Boolean   @default(false) // セクションが公開されているかどうか。
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Video {
  id            String          @id @default(uuid()) @db.VarChar(255)
  question      Question[]
  section       Section         @relation(fields: [section_id], references: [id])
  section_id    String          @db.VarChar(255)
  order         Int
  url           String?
  name          String?
  description   String?         @db.LongText
  published     Boolean         @default(false) // 動画が公開されているかどうか。
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  deleted_at    DateTime?
  ViewingStatus ViewingStatus[]
  FavoriteVideo FavoriteVideo[]
}

model Contact {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  subject    String
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status     Int //対応ステータス(0:未対応, 1:対応中, 2:対応済み)
}

model Question {
  id         String   @id @default(uuid()) @db.VarChar(255)
  answer     Answer[]
  video      Video    @relation(fields: [video_id], references: [id])
  video_id   String   @db.VarChar(255)
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @db.VarChar(255)
  title      String   @db.VarChar(255)
  content    String   @db.LongText
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Answer {
  id          String   @id @default(uuid()) @db.VarChar(255)
  question    Question @relation(fields: [question_id], references: [id])
  question_id String   @db.VarChar(255)
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.VarChar(255)
  comment     String   @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ViewingStatus {
  status     Boolean  @default(false)
  user_id    String   @db.VarChar(255)
  video_id   String   @db.VarChar(255)
  user       User     @relation(fields: [user_id], references: [id])
  video      Video    @relation(fields: [video_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, video_id])
}

model Tag {
  id              String      @id @default(uuid())
  name            String
  color           String
  backgroundColor String
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime?
  courseId        String?     @db.VarChar(255)
  courses         CourseTag[]
}

model CourseTag {
  course    Course @relation(fields: [course_id], references: [id])
  course_id String @db.VarChar(255)
  tag       Tag    @relation(fields: [tag_id], references: [id])
  tag_id    String @db.VarChar(255)

  @@id([course_id, tag_id])
}

model FavoriteVideo {
  status     Boolean   @default(false) // お気に入りでない：0、お気に入り：1
  user_id    String    @db.VarChar(255)
  video_id   String    @db.VarChar(255)
  user       User      @relation(fields: [user_id], references: [id])
  video      Video     @relation(fields: [video_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@unique([user_id, video_id])
}
